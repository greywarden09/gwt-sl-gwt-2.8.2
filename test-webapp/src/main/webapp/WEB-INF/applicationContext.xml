<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<!-- 
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 -->
<beans>

    <!--
        Instantiate the Add service: implements both methods and the RPC interface
    -->
    <bean id="ServiceTestImpl" class="org.gwtwidgets.server.spring.test.serverimpl.TestServiceImpl"/>

    <!-- Test for issue #2035066 - does ReflectionUtils skip interfaces from superclasses?
     -->
    <bean id="ExtendedServiceTest" class="org.gwtwidgets.server.spring.test.serverimpl.ExtendedTestServiceImpl"/>

    <!--
        Create POJO version of the Test service: implements only methods but does not expose any RPC interfaces
    -->
    <bean id="ServiceTestPOJO" class="org.gwtwidgets.server.spring.test.serverimpl.ServiceTestPOJO"/>


    <bean id="ServiceTest" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="ServiceTestImpl"/>
        <property name="autodetectInterfaces" value="true"/>
        <property name="interceptorNames">
            <list>
                <value>requestSetter</value>
            </list>
        </property>
    </bean>

    <!--
        A method interceptor used to inject the current servlet- request and response into the
        service.
     -->

    <bean id="requestSetter" class="org.gwtwidgets.server.spring.RequestInjection">
        <property name="requestSetterName" value="setRequest"/>
        <property name="responseSetterName" value="setResponse"/>
    </bean>

    <!--
        Implements a dummy datasource over an in-memory DB to demonstrate that transaction proxies
        work too.
     -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="url" value="jdbc:hsqldb:mem:gwt"/>
        <property name="username" value="sa"/>
        <property name="password" value=""/>
    </bean>

    <!--
        Instantiate Add service with transaction manager around
     -->
    <bean id="ServiceTestTx"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="txManager"/>
        <property name="target" ref="ServiceTest"/>
        <property name="transactionAttributes">
            <props>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>
    <!--
    This is not a real transaction scenario but just an example of how it would be
    done in a real dployment. This transaction manager references a JDBC datasource
    and wraps around services.
     -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

</beans>